"""
Shared data models for the BI Chat CLI system.
Interface contracts between Agent 1 and Agent 2.
"""

from datetime import datetime
from typing import Any

from pydantic import BaseModel, Field


class QueryResult(BaseModel):
    """Result from BigQuery execution"""

    data: list[dict[str, Any]]
    metadata: dict[str, Any]
    execution_time: float
    row_count: int
    date_range: tuple[datetime, datetime]  # Enforced 30-day limit


class TokenUsage(BaseModel):
    """LLM token usage tracking"""

    prompt_tokens: int
    completion_tokens: int
    total_tokens: int
    cost_estimate: float


class AgentResponse(BaseModel):
    """Response from any CrewAI agent"""

    content: str
    visualizations: list[dict[str, Any]] | None = None
    token_usage: TokenUsage
    confidence_score: float  # 0.0 - 1.0
    timestamp: datetime
    cached: bool = False


class UserSession(BaseModel):
    """User session data for persistence"""

    id: int | None = None  # Auto-generated by database
    user_id: str = Field(default="default_user")
    title: str
    created_at: datetime = Field(default_factory=datetime.now)
    last_activity: datetime = Field(default_factory=datetime.now)
    conversation_history: list[dict[str, Any]] = Field(default_factory=list)

    def add_message(
        self, role: str, content: str, metadata: dict[str, Any] | None = None
    ) -> None:
        """Add a message to the conversation history."""
        message = {
            "timestamp": datetime.now().isoformat(),
            "role": role,  # 'user' or 'assistant'
            "content": content,
            "metadata": metadata or {},
        }
        self.conversation_history.append(message)
        self.last_activity = datetime.now()

    def get_message_count(self) -> int:
        """Get the total number of messages in this session."""
        return len(self.conversation_history)

    def clear_history(self) -> None:
        """Clear all conversation history."""
        self.conversation_history = []
        self.last_activity = datetime.now()


class ObservabilityLog(BaseModel):
    """Agent decision tracking for debugging"""

    session_id: str
    agent_name: str
    decision_reason: str
    input_query: str
    output_sql: str
    confidence: float
    timestamp: datetime


class UserQuery(BaseModel):
    """Standardized user input"""

    query: str
    user_id: str
    session_id: str
    context: dict[str, Any] | None = None

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[project]
name = "bi-chat-cli"
version = "0.1.0"
description = "Business Intelligence Chat CLI for BigQuery data analysis"
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
authors = [
    { name = "BI Chat CLI Team" },
]
keywords = ["business-intelligence", "bigquery", "cli", "ai", "crewai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "click>=8.1.0",
    "typer>=0.9.0",
    "crewai>=0.28.0",
    "google-cloud-aiplatform>=1.38.0",
    "google-generativeai>=0.3.0",
    "google-cloud-bigquery>=3.13.0",
    "pydantic>=2.5.0",
    "plotly>=5.17.0",
    "matplotlib>=3.8.0",
    "loguru>=0.7.0",
    "python-dotenv>=1.0.0",
    "rich>=13.7.0",
    "httpx>=0.25.0",
    "pandas>=2.1.0",
    "numpy>=1.25.0",
    "sqlparse>=0.4.4",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
]

[project.scripts]
bi-chat = "src.cli.main:app"

[project.urls]
Homepage = "https://github.com/yourusername/bi-chat-cli"
Repository = "https://github.com/yourusername/bi-chat-cli"
Issues = "https://github.com/yourusername/bi-chat-cli/issues"

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
# Enable pycodestyle, pyflakes, isort, and more
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
    "RUF", # ruff-specific rules
]

ignore = [
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

# Use ruff for formatting (replaces black)
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"


[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "slow: marks tests as slow",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]